{"version":3,"sources":["config.js","hooks/useConfigGraph.js","hooks/useNextState.js","components/ModelGraph.js","helpers/exportHelper.js","App.js","index.js"],"names":["getApiInstanse","axios","create","baseURL","useConfigGraph","useState","loading","setLoading","configure","params","post","then","message","success","catch","error","console","log","useNextState","data","setData","fetch","get","res","Text","Typography","ModelGraph","isStartedModel","nodesInColumn","time","interval","changeModel","elapsedTime","setElapsedTime","useEffect","intervalId","setInterval","clearInterval","nodes","forEach","node","i","state","label","id","toString","color","level","edges","countInRow","push","from","to","generateEdges","style","marginBottom","width","margin","gutter","justify","span","type","strong","workingNodeCount","serviceNodeCount","defectiveNodeCount","resourceCount","height","background","borderTop","borderBottom","graph","options","layout","hierarchical","physics","interaction","dragNodes","selectable","shape","size","font","borderWidth","getCanvasImage","document","querySelector","toDataURL","Spin","setDefaultIndicator","LoadingOutlined","fontSize","spin","Title","App","isStart","setIsStart","isConfig","setIsConfig","setNodesInCoumn","startConfig","setStartConfig","currentState","setCurrentState","setTime","Content","onFinish","nodeCount","NodeCount","WorkingNodeCount","ServiceNodeCount","DefectiveNodeCount","WorkingTimeMilliseconds","workingTimeMilliseconds","ServiceTimeMilliseconds","serviceTimeMilliseconds","RepairTimeMilliseconds","repairTimeMilliseconds","ResourceCount","ServicePrice","servicePrice","Math","round","sqrt","border","padding","Item","name","initialValue","rules","required","onChange","v","value","disabled","htmlType","onClick","danger","imageBase64","doc","Document","styles","default","heading1","run","bold","italics","paragraph","spacing","after","before","heading2","paragraphStyles","basedOn","next","quickFormat","sections","properties","children","Paragraph","text","heading","HeadingLevel","HEADING_1","HEADING_2","Table","rows","TableRow","TableCell","ImageRun","transformation","Packer","toBlob","blob","saveAs","exportToDocx","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.525baefa.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nexport const BASE_URL = \"https://localhost:5001\"\r\nexport const CONFIG_URL = \"/config/new\"\r\nexport const NEXT_STATE_URL = \"/graph/state\"\r\n\r\nexport const getApiInstanse = () => {\r\n    return axios.create({\r\n        baseURL: BASE_URL,\r\n    })\r\n}\r\n","import { useState } from \"react\"\r\nimport { getApiInstanse, CONFIG_URL } from \"../config\"\r\nimport { message } from \"antd\"\r\n\r\nconst useConfigGraph = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const configure = (params) => {\r\n        setLoading(true)\r\n\r\n        return getApiInstanse()\r\n            .post(CONFIG_URL, params)\r\n            .then(() => {\r\n                message.success(\"Конфигурация модели прошла успешно\")\r\n                setLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                message.error(\"Произошла ошибка: \" + error.message)\r\n                console.log(error)\r\n\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    return { configure, loading }\r\n}\r\n\r\nexport default useConfigGraph\r\n","import { useState } from \"react\"\r\nimport { getApiInstanse, NEXT_STATE_URL } from \"../config\"\r\n\r\nconst useNextState = () => {\r\n    const [data, setData] = useState({})\r\n    const fetch = () => {\r\n        getApiInstanse()\r\n            .get(NEXT_STATE_URL)\r\n            .then((res) => {\r\n                setData(res.data)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    return { data, fetch }\r\n}\r\n\r\nexport default useNextState\r\n","import React, { useEffect, useState } from \"react\"\r\n\r\nimport useNextState from \"../hooks/useNextState\"\r\nimport Graph from \"react-graph-vis\"\r\nimport { Row, Col, Typography } from \"antd\"\r\n\r\nconst { Text } = Typography\r\n\r\nconst ModelGraph = ({ isStartedModel, nodesInColumn, time, interval, changeModel }) => {\r\n    const { data, fetch } = useNextState()\r\n    const [elapsedTime, setElapsedTime] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (isStartedModel && elapsedTime < time) {\r\n            const intervalId = setInterval(() => {\r\n                setElapsedTime(elapsedTime + 1)\r\n                fetch()\r\n            }, interval)\r\n\r\n            return () => clearInterval(intervalId)\r\n        }\r\n    }, [fetch, setElapsedTime, isStartedModel, elapsedTime, interval, time])\r\n\r\n    useEffect(() => {\r\n        changeModel(data)\r\n    }, [data, changeModel])\r\n\r\n    const nodes = data.nodes || []\r\n\r\n    const getColor = (state) => {\r\n        if (state === 0) {\r\n            return \"#00bb00\"\r\n        }\r\n\r\n        if (state === 1) {\r\n            return \"#FFED3D\"\r\n        }\r\n\r\n        return \"#bb0000\"\r\n    }\r\n\r\n    const generateEdges = (countInRow) => {\r\n        const edges = []\r\n        nodes.forEach((node) => {\r\n            if (node.level !== nodesInColumn) edges.push({ from: node.id, to: node.id + 1 })\r\n            edges.push({ from: node.id, to: node.id + countInRow })\r\n        })\r\n\r\n        return edges\r\n    }\r\n\r\n    nodes.forEach((node, i) => {\r\n        node.label = node.id.toString()\r\n        node.color = getColor(node.state)\r\n        node.level = (i % nodesInColumn) + 1\r\n    })\r\n\r\n    const edges = generateEdges(nodesInColumn)\r\n\r\n    const options = {\r\n        layout: {\r\n            hierarchical: true,\r\n        },\r\n        physics: false,\r\n        interaction: {\r\n            dragNodes: false,\r\n            selectable: false,\r\n        },\r\n        nodes: {\r\n            shape: \"dot\",\r\n            size: 28,\r\n            font: {\r\n                size: 24,\r\n                color: \"#222\",\r\n            },\r\n            borderWidth: 2,\r\n        },\r\n        edges: {\r\n            width: 2,\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Row style={{ marginBottom: \"50px\" }}>\r\n            <div style={{ width: \"80vw\", margin: \"20px auto\" }}>\r\n                <Row gutter={[20, 20]} justify=\"space-between\">\r\n                    <Col span={8}>\r\n                        <Text>\r\n                            Кол-во работающих узлов:{\" \"}\r\n                            <Text type=\"success\" strong>\r\n                                {data.workingNodeCount || 0}\r\n                            </Text>\r\n                        </Text>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Text>\r\n                            Кол-во узлов в сервисе:{\" \"}\r\n                            <Text type=\"warning\" strong>\r\n                                {data.serviceNodeCount || 0}\r\n                            </Text>\r\n                        </Text>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Text>\r\n                            Кол-во неисправных узлов:{\" \"}\r\n                            <Text type=\"danger\" strong>\r\n                                {data.defectiveNodeCount || 0}\r\n                            </Text>\r\n                        </Text>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Text>\r\n                            Ресурсов осталось: <Text strong>{data.resourceCount || 0}</Text>\r\n                        </Text>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Text>\r\n                            Прошедшее время: <Text strong>{data.elapsedTime || 0}</Text>\r\n                        </Text>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            <Graph\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"600px\",\r\n                    background: \"#f5f5f5\",\r\n                    borderTop: \"solid 1px rgba(0,0,0,.1)\",\r\n                    borderBottom: \"solid 1px rgba(0,0,0,.1)\",\r\n                }}\r\n                graph={{ nodes, edges }}\r\n                options={options}\r\n            />\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ModelGraph\r\n","import { Document, Packer, Paragraph, HeadingLevel, TableRow, TableCell, Table, ImageRun } from \"docx\"\r\nimport { saveAs } from \"file-saver\"\r\n\r\nexport const exportToDocx = (startConfig, currentState) => {\r\n    const imageBase64 = getCanvasImage()\r\n\r\n    const doc = new Document({\r\n        styles: {\r\n            default: {\r\n                heading1: {\r\n                    run: {\r\n                        size: 32,\r\n                        bold: true,\r\n                        italics: false,\r\n                        color: \"000000\",\r\n                    },\r\n                    paragraph: {\r\n                        spacing: {\r\n                            after: 240,\r\n                            before: 150,\r\n                        },\r\n                    },\r\n                },\r\n                heading2: {\r\n                    run: {\r\n                        size: 26,\r\n                        bold: false,\r\n                        italics: false,\r\n                        color: \"2E74B5\",\r\n                    },\r\n                    paragraph: {\r\n                        spacing: {\r\n                            after: 150,\r\n                            before: 250,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            paragraphStyles: [\r\n                {\r\n                    id: \"p\",\r\n                    name: \"paragraph\",\r\n                    basedOn: \"Normal\",\r\n                    next: \"Normal\",\r\n                    quickFormat: true,\r\n                    run: {\r\n                        size: 24,\r\n                        color: \"000000\",\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        sections: [\r\n            {\r\n                properties: {},\r\n                children: [\r\n                    new Paragraph({\r\n                        text: \"Начальные параметры модели\",\r\n                        heading: HeadingLevel.HEADING_1,\r\n                    }),\r\n\r\n                    new Paragraph({\r\n                        text: \"Начальное кол-во узлов\",\r\n                        heading: HeadingLevel.HEADING_2,\r\n                    }),\r\n\r\n                    new Table({\r\n                        rows: [\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во работающих узлов (Su)\", style: \"p\" })],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во узлов в сервисе (So)\", style: \"p\" })],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во дефектных узлов (Sh)\", style: \"p\" })],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${startConfig.WorkingNodeCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${startConfig.ServiceNodeCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${startConfig.DefectiveNodeCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                        ],\r\n                    }),\r\n\r\n                    new Paragraph({\r\n                        text: \"Параметры времени\",\r\n                        heading: HeadingLevel.HEADING_2,\r\n                    }),\r\n\r\n                    new Table({\r\n                        rows: [\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({\r\n                                                text: \"Кол-во времени в работе в секундах (Тг)\",\r\n                                                style: \"p\",\r\n                                            }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({\r\n                                                text: \"Кол-во времени в сервисе в секундах (Тo)\",\r\n                                                style: \"p\",\r\n                                            }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: \"Время обслуживания в секундах (Тp)\", style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({\r\n                                                text: `${startConfig.WorkingTimeMilliseconds}`,\r\n                                                style: \"p\",\r\n                                            }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({\r\n                                                text: `${startConfig.ServiceTimeMilliseconds}`,\r\n                                                style: \"p\",\r\n                                            }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({\r\n                                                text: `${startConfig.RepairTimeMilliseconds}`,\r\n                                                style: \"p\",\r\n                                            }),\r\n                                        ],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                        ],\r\n                    }),\r\n\r\n                    new Paragraph({\r\n                        text: \"Настройки ресурсов\",\r\n                        heading: HeadingLevel.HEADING_2,\r\n                    }),\r\n\r\n                    new Table({\r\n                        rows: [\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во ресурсов на один узел\", style: \"p\" })],\r\n                                    }),\r\n\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Стоимость обслуживания (Ro)\", style: \"p\" })],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: `${startConfig.ResourceCount}`, style: \"p\" })],\r\n                                    }),\r\n\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: `${startConfig.ServicePrice}`, style: \"p\" })],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                        ],\r\n                    }),\r\n\r\n                    new Paragraph({\r\n                        text: \"Параметры на конец моделирования\",\r\n                        heading: HeadingLevel.HEADING_1,\r\n                    }),\r\n\r\n                    new Table({\r\n                        rows: [\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во работающих узлов (Su)\", style: \"p\" })],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во узлов в сервисе (So)\", style: \"p\" })],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Кол-во дефектных узлов (Sh)\", style: \"p\" })],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Остаток ресурсов\", style: \"p\" })],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: \"Прошедшее время\", style: \"p\" })],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                            new TableRow({\r\n                                children: [\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${currentState.workingNodeCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${currentState.serviceNodeCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${currentState.defectiveNodeCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [\r\n                                            new Paragraph({ text: `${currentState.resourceCount}`, style: \"p\" }),\r\n                                        ],\r\n                                    }),\r\n                                    new TableCell({\r\n                                        children: [new Paragraph({ text: `${currentState.elapsedTime}`, style: \"p\" })],\r\n                                    }),\r\n                                ],\r\n                            }),\r\n                        ],\r\n                    }),\r\n\r\n                    new Paragraph({\r\n                        text: \"Граф на конец моделирования\",\r\n                        heading: HeadingLevel.HEADING_1,\r\n                    }),\r\n\r\n                    new Paragraph({\r\n                        children: [\r\n                            new ImageRun({\r\n                                data: imageBase64,\r\n                                transformation: {\r\n                                    width: 850,\r\n                                    height: 300,\r\n                                },\r\n                            }),\r\n                        ],\r\n                    }),\r\n                ],\r\n            },\r\n        ],\r\n    })\r\n\r\n    Packer.toBlob(doc).then((blob) => {\r\n        saveAs(blob, \"modeling_result.docx\")\r\n    })\r\n}\r\n\r\nconst getCanvasImage = () => {\r\n    const canvas = document.querySelector(\".vis-network canvas\")\r\n\r\n    return canvas.toDataURL(\"image/png;base64;\")\r\n}\r\n","import React, { useState } from \"react\"\nimport useConfigGraph from \"./hooks/useConfigGraph\"\nimport ModelGraph from \"./components/ModelGraph\"\nimport { Layout, Row, Col, Button, Spin, Form, InputNumber, Typography, Space, Divider } from \"antd\"\nimport { LoadingOutlined } from \"@ant-design/icons\"\nimport { exportToDocx } from \"./helpers/exportHelper\"\nimport \"./App.css\"\nSpin.setDefaultIndicator(<LoadingOutlined style={{ fontSize: 24 }} spin />)\n\nconst { Title } = Typography\n\nconst App = () => {\n    const { configure, loading } = useConfigGraph()\n\n    const [isStart, setIsStart] = useState(false)\n    const [isConfig, setIsConfig] = useState(false)\n    const [nodesInColumn, setNodesInCoumn] = useState(5)\n\n    const [startConfig, setStartConfig] = useState()\n    const [currentState, setCurrentState] = useState()\n\n    const [time, setTime] = useState(100)\n    const [interval, setInterval] = useState(1000)\n\n    const configHandler = (data) => {\n        console.log(data)\n        const nodeCount = data.workingNodeCount + data.serviceNodeCount + data.defectiveNodeCount\n\n        const params = {\n            NodeCount: nodeCount,\n            WorkingNodeCount: data.workingNodeCount,\n            ServiceNodeCount: data.serviceNodeCount,\n            DefectiveNodeCount: data.defectiveNodeCount,\n            WorkingTimeMilliseconds: data.workingTimeMilliseconds,\n            ServiceTimeMilliseconds: data.serviceTimeMilliseconds,\n            RepairTimeMilliseconds: data.repairTimeMilliseconds,\n            ResourceCount: data.resourceCount,\n            ServicePrice: data.servicePrice,\n        }\n\n        setNodesInCoumn(Math.round(Math.sqrt(nodeCount)))\n\n        configure(params).then(() => {\n            setStartConfig(params)\n            setIsConfig(true)\n        })\n    }\n\n    const startHandler = () => {\n        setIsStart(true)\n    }\n\n    const changeModel = (data) => {\n        setCurrentState(data)\n    }\n\n    return (\n        <Layout.Content>\n            <Row style={{ width: \"80vw\", margin: \"20px auto\" }}>\n                <Form\n                    onFinish={configHandler}\n                    style={{ width: \"100%\", border: \"1px solid rgba(0,0,0,.1)\", padding: \"20px\" }}\n                >\n                    <Title level={4} style={{ marginBottom: \"20px\" }}>\n                        Параметры модели\n                    </Title>\n                    <Row justify=\"space-between\">\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"workingNodeCount\"\n                                label=\"Кол-во работающих узлов (Su)\"\n                                initialValue={20}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"workingTimeMilliseconds\"\n                                label=\"Кол-во времени в работе в секундах (Тг)\"\n                                initialValue={3}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row justify=\"space-between\">\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"serviceNodeCount\"\n                                label=\"Кол-во узлов в сервисе (So)\"\n                                initialValue={20}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"serviceTimeMilliseconds\"\n                                label=\"Кол-во времени в сервисе в секундах (Тo)\"\n                                initialValue={4}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row justify=\"space-between\">\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"defectiveNodeCount\"\n                                label=\"Кол-во дефектных узлов (Sh)\"\n                                initialValue={10}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"repairTimeMilliseconds\"\n                                label=\"Время обслуживания в секундах (Тp)\"\n                                initialValue={0}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row justify=\"space-between\">\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"resourceCount\"\n                                label=\"Кол-во ресурсов на один узел\"\n                                initialValue={10000}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                name=\"servicePrice\"\n                                label=\"Стоимость обслуживания (Ro)\"\n                                initialValue={15}\n                                rules={[{ required: true }]}\n                            >\n                                <InputNumber />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Divider />\n                    <Row justify=\"space-between\">\n                        <Col span={12}>\n                            <Form.Item label=\"Время моделирования (кол-во тиков)\">\n                                <InputNumber onChange={(v) => setTime(v)} value={time} />\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item label=\"Время одного тика (кол-во мс)\">\n                                <InputNumber onChange={(v) => setInterval(v)} value={interval} />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Divider />\n                    <Form.Item>\n                        <Row justify=\"space-between\">\n                            <Space>\n                                <Button disabled={isConfig} loading={loading} type=\"primary\" htmlType=\"submit\">\n                                    Сконфигурировать модель\n                                </Button>\n\n                                <Button disabled={!isConfig || isStart} type=\"primary\" onClick={() => startHandler()}>\n                                    Старт\n                                </Button>\n\n                                <Button disabled={!isStart} type=\"primary\" danger onClick={() => setIsStart(false)}>\n                                    Стоп\n                                </Button>\n                            </Space>\n                            <Button type=\"primary\" onClick={() => exportToDocx(startConfig, currentState)}>\n                                Экспорт в docx\n                            </Button>\n                        </Row>\n                    </Form.Item>\n                </Form>\n            </Row>\n\n            <ModelGraph\n                nodesInColumn={nodesInColumn}\n                isStartedModel={isStart}\n                time={time}\n                interval={interval}\n                changeModel={(data) => changeModel(data)}\n            />\n        </Layout.Content>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport \"antd/dist/antd.less\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}